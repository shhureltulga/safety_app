import 'dart:convert';
import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:get_storage/get_storage.dart';
import 'package:http/http.dart' as http;

// üß© –ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç—ã–Ω UI
class AcknowledgementSection extends StatefulWidget {
  final int instructionId;
  final bool testPassed;

  const AcknowledgementSection({
    super.key,
    required this.instructionId,
    required this.testPassed,
  });

  @override
  State<AcknowledgementSection> createState() => _AcknowledgementSectionState();
}

class _AcknowledgementSectionState extends State<AcknowledgementSection> {
  bool agreed = false;
  bool loading = false;

  Future<void> acknowledge() async {
    final token = GetStorage().read('token');
    if (token == null) {
      Get.snackbar('‚ö†Ô∏è –ê–ª–¥–∞–∞', '–ù—ç–≤—Ç—Ä—ç—Ö –º—ç–¥—ç—ç–ª—ç–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π');
      return;
    }

    setState(() => loading = true);

    final url = Uri.parse('http://43.201.146.103:3000/instruction-acknowledge');
    final res = await http.post(
      url,
      headers: {
        'Authorization': 'Bearer $token',
        'Content-Type': 'application/json',
      },
      body: jsonEncode({'instructionId': widget.instructionId}),
    );

    setState(() => loading = false);

    if (res.statusCode == 201) {
      Get.back(); // Modal —Ö–∞–∞—Ö
      Get.snackbar('‚úÖ –ê–º–∂–∏–ª—Ç—Ç–∞–π', '–¢–∞ –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–ª–∞–∞');
    } else {
      final err = jsonDecode(res.body);
      Get.snackbar('‚õî –ê–ª–¥–∞–∞', err['message'] ?? '–ê–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞');
    }
  }

  @override
  Widget build(BuildContext context) {
    if (!widget.testPassed) return const SizedBox(); // —Ç—ç–Ω—Ü—ç—ç–≥“Ø–π –±–æ–ª —Ö–∞—Ä—É—É–ª–∞—Ö–≥“Ø–π

    return Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        const Text(
          '‚úÖ –¢–∞ –∑–∞–∞–≤–∞—Ä—á–∏–ª–≥–∞–∞–≥ –æ–π–ª–≥–æ–∂ –∑”©–≤—à”©”©—Ä—á –±–∞–π–Ω–∞ —É—É?',
          style: TextStyle(fontSize: 16, fontWeight: FontWeight.w600),
        ),
        const SizedBox(height: 12),
        CheckboxListTile(
          title: const Text('–ë–∏ –æ–π–ª–≥–æ–∂ –∑”©–≤—à”©”©—Ä—Å”©–Ω.'),
          value: agreed,
          onChanged: (val) => setState(() => agreed = val ?? false),
        ),
        const SizedBox(height: 8),
        ElevatedButton.icon(
          onPressed: agreed && !loading ? acknowledge : null,
          icon: const Icon(Icons.check_circle),
          label: loading
              ? const SizedBox(
                  width: 20,
                  height: 20,
                  child: CircularProgressIndicator(strokeWidth: 2, color: Colors.white),
                )
              : const Text('–ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö'),
          style: ElevatedButton.styleFrom(
            minimumSize: const Size(double.infinity, 48),
            backgroundColor: Colors.blueAccent,
            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
          ),
        ),
      ],
    );
  }
}

// ü™ü Modal-–∏–π–≥ –¥—É—É–¥–∞—Ö —Ñ—É–Ω–∫—Ü
void showAcknowledgeModal(BuildContext context, int instructionId) {
  showModalBottomSheet(
    context: context,
    isScrollControlled: true,
    backgroundColor: Colors.transparent,
    barrierColor: Colors.black.withOpacity(0.3), // üü° –ë“Ø–¥—ç–≥ –∞—Ä—ã–Ω —Ñ–æ–Ω
    builder: (_) {
      return ClipRRect(
        borderRadius: const BorderRadius.vertical(top: Radius.circular(24)),
        child: BackdropFilter(
          filter: ImageFilter.blur(sigmaX: 2.5, sigmaY: 2.5),
          child: Container(
            padding: const EdgeInsets.fromLTRB(20, 24, 20, 40),
            decoration: const BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.vertical(top: Radius.circular(24)),
              boxShadow: [
                BoxShadow(
                  color: Colors.black12,
                  blurRadius: 15,
                  spreadRadius: 3,
                ),
              ],
            ),
            child: AcknowledgementSection(
              instructionId: instructionId,
              testPassed: true, // ‚Üê –¢–∞ —Ç–µ—Å—Ç–∏–π–Ω “Ø—Ä –¥“Ø–Ω–≥—ç—ç—Å —ç–Ω—ç —É—Ç–≥—ã–≥ ”©–≥”©”©—Ä—ç–π
            ),
          ),
        ),
      );
    },
  );
}
